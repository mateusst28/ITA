# Python - Lista 1 - Mateus Siqueira Thimóteo - COMP22

#1
import turtle

wn=turtle.Screen()
wn.bgcolor("lightgreen")
t=turtle.Turtle()

for i in range(1,6):
    t.penup()
    t.goto(-10*i,-10*i)
    t.pendown()
    sz=20*i
    for j in range(4):
        t.forward(sz)
        t.left(90)
wn.exitonclick()




#2
import turtle

wn=turtle.Screen()
wn.bgcolor("lightgreen")
t=turtle.Turtle()

def draw_poly(t, n, sz):
    for i in range(n):
        t.forward(sz)
        t.left(360/n).
        

draw_poly(t,8,50)
wn.exitonclick()




#3
def sum_to(n):
    return n*(n+1)/2



#4
def sum_up_to_first_even(l):
    l1=[x%2 for x in l]
    try:
        i=l1.index(0)
    except:
        return sum(l)
    
    return sum(l[0:i])



#5
def count_words_up_to_sam(l):
    l1=[word for word in l if 'sam' in word]
    if len(l1)==0:
        return len(l)
    else:
        return l.index(l1[0])

count_words_up_to_sam(['tio','sam']) # 1 word
count_words_up_to_sam(['tio','joão']) # 2 words



#6
def is_prime(n):
    i=2
    divisor_found=False
    while (i**2<=n and not divisor_found):
        if n%i==0:
            divisor_found=True
        i+=1
    return not divisor_found

# O n-ésimo primo p(n) é tal que p(n) ~ n*ln(n) ==> A 'densidade' de primos em torno de 20000000 é aproximadamente 1/ln(20000000), cerca de 5.95% ==> 6 alunos
import numpy as np
print(1/np.log(20000000))

print(is_prime(20000128))
# Não nasci em um dia primo :/

def test(x):
    print(x)

test(is_prime(23))
test(not is_prime(91))




#7
def sum_of_squares(xs):
    return sum([x**2 for x in xs])

sum_of_squares([3,1,3,4,2,4,5,3,2,3,2]) # 106



#8
def print_mult_table(n):
    l0=9*' '+'1'
    for i in range(2,n+1):
        l0=l0+(4-len(str(i)))*' '+str(i)
    print(l0)
    print('   :'+(4*n+2)*'-')
    for i in range(1,n+1):
        l=(3-len(str(i)))*' '+str(i)+':  '
        for j in range(1,n+1):
            l=l+(4-len(str(j*i)))*' ' + str(j*i)
        print(l)

print_mult_table(12)
print_mult_table(20)



#9
def reverse(s):
    n=len(s)
    s_rev=""
    for i in range(n):
        s_rev+=s[n-i-1]
    return s_rev
def is_palindrome(s):
    return s==reverse(s)

test(is_palindrome('ovo'))
test(is_palindrome('arara'))
test(not is_palindrome('melancia'))



#10
def sum_complex_numbers(a,b):
    s=(a[0]+b[0],a[1]+b[1])
    return s